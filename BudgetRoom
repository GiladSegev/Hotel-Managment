class BudgetRoom(Room):
    def __init__(self, floor, number, guests, clean_level, \
                 rank=1, satisfaction=1.0, clean_stock=0):
        super().__init__(floor, number, guests, clean_level, rank, satisfaction)
        self.clean_stock = clean_stock

    def __repr__(self):
        return super().__repr__() + f"\ntype: BudgetRoom \nclean_stock: {self.clean_stock}"

    def can_clean(self):
        return self.clean_stock > 0

    def clean(self):
        super().clean()
        self.clean_stock -= 1

    def check_in(self, guests):
        super().check_in(guests)
        self.clean_stock = 0

    def move_to(self, other):
        super().move_to(other)
        if isinstance(other, BudgetRoom):
            other.clean_stock = self.clean_stock

    def grant_clean(self):
        if not self.is_occupied():
            raise RoomError('Cannot grant an empty room')
        self.clean_stock += 1
        self.satisfaction = min(5, self.satisfaction + 0.5)

    def grant_snack(self):
        if not self.is_occupied():
            raise RoomError('Cannot grant an empty room')
        self.satisfaction = min(5, self.satisfaction + 0.8)
        self.clean_level = max(1, self.clean_level - 1)
